//-------------------------------------------------------
struct VIn
{
	float4 p : POSITION;	float3 n : NORMAL;
	float3 t : TANGENT;		float3 uv: TEXCOORD0;
	float4 c : COLOR;
};
struct VOut
{
	float4 p : POSITION;	float3 uv : TEXCOORD0;	float4 wp : TEXCOORD1;
	float3 n : TEXCOORD2;	float3 t  : TEXCOORD3;	float3 b  : TEXCOORD4;
	float4 c : COLOR;
};
struct PIn
{							float3 uv : TEXCOORD0;	float4 wp : TEXCOORD1;
	float3 n : TEXCOORD2;	float3 t  : TEXCOORD3;	float3 b  : TEXCOORD4;
	float4 c : COLOR;
};

void ambient_vs(VIn IN,
	uniform float4x4 wvpMat,
	out float4 oPos : POSITION, out float2 oUV : TEXCOORD0)
{
	oPos = mul(wvpMat, IN.p);  oUV = IN.uv.xy;
}

float4 ambient_ps(in float2 uv : TEXCOORD0,
	uniform float3 ambient,  uniform float4 matDif,
	uniform sampler2D diffuseMap): COLOR0
{
	float4 diffuseTex = tex2D(diffuseMap, uv);
	return float4(ambient * matDif.rgb * diffuseTex.rgb, diffuseTex.a);
}

///-----------------------------------------------------------------------------------------------------------------
///-------------------------------------------------  ppx  vs  render
///-----------------------------------------------------------------------------------------------------------------
VOut render_vs(VIn IN,
	uniform float4x4 wMat,  uniform float4x4 wvpMat)
{
	VOut OUT;  OUT.uv = IN.uv;
	OUT.wp = mul(wMat, IN.p);
	OUT.p = mul(wvpMat, IN.p);
	OUT.n = IN.n;
	OUT.c = IN.c;  //clr
	return OUT;
}

//-------------------------------------------------  ppx  render  -------------------------------------------------
float4 render_ps(PIn IN,      /// _road for minimap_
	uniform float3 ambient,	uniform float4 matDif): COLOR0
{
	float bridge = IN.c.x, pipe = IN.c.y;
	float norm = abs(IN.n.y);  //abs

	float pwr = lerp(lerp(8, 8, bridge), 4, pipe);
	float ter = lerp(lerp(1, 0, bridge), 0, pipe);
	float diffuse = 1 - lerp( 1-lerp(pow(norm, pwr), pow(norm, pwr), pipe),
		pow(1.f - 2.f*acos(norm)/3.141592654, pwr), ter);
	float3 clrLi = ambient + diffuse * matDif.rgb;
 
	//return float4(IN.n, 1);  // test
	//return IN.c;  // test
	//float alpha = lerp(1, 253.f/255.f, bridge);

	float3 clr = lerp( lerp(
		float3(1, 1, 1) * clrLi,
		float3(0, 0.8,1) * (0.4+0.7*clrLi), bridge),
		float3(1,0.8, 0) * (0.2+1.0*clrLi), pipe);
	return float4(clr, 1);
}
//-------------------------------------------------
float4 render_gr_ps(PIn IN): COLOR0
{
	float bridge = IN.c.w;

	//return IN.c;  // test
	return float4(bridge * float3(1,1,1), bridge);
}
